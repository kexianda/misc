
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.util.Random;
//import jdk.test.lib.*;

public class TestCBC {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        warmUp();
        test_key128_4Blocks_NISTData();
        test_key128_with_different_blocks_input();
        test_key192_with_different_blocks_input();
        test_key256_with_different_blocks_input();

        test_key192_cipher_update();
        test_key256_cipher_update();

        //printTest();
    }

    private static int test_key128_4Blocks_NISTData() {
        int errNo = 0;

        char[] test_plain_text = {
            0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
            0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
            0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
            0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
        };

        char[] test_key_128 = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c, 0xff};
        char[] test_key_192 = {0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
            0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b};
        char[] test_key_256 = {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
            0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4};
        char[] test_init_counter = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff};
        char[] test_init_vector = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};

        char[] test_cipher_128_cbc = {
            0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
            0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
            0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
            0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7};
        char[] test_cipher_192_cbc = {
            0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0, 0x71, 0xe8,
            0xb4, 0xd9, 0xad, 0xa9, 0xad, 0x7d, 0xed, 0xf4, 0xe5, 0xe7, 0x38, 0x76, 0x3f, 0x69, 0x14, 0x5a,
            0x57, 0x1b, 0x24, 0x20, 0x12, 0xfb, 0x7a, 0xe0, 0x7f, 0xa9, 0xba, 0xac, 0x3d, 0xf1, 0x02, 0xe0,
            0x08, 0xb0, 0xe2, 0x79, 0x88, 0x59, 0x88, 0x81, 0xd9, 0x20, 0xa9, 0xe6, 0x4f, 0x56, 0x15, 0xcd};
        char[] test_cipher_256_cbc = {
            0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba, 0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb, 0xd6,
            0x9c, 0xfc, 0x4e, 0x96, 0x7e, 0xdb, 0x80, 0x8d, 0x67, 0x9f, 0x77, 0x7b, 0xc6, 0x70, 0x2c, 0x7d,
            0x39, 0xf2, 0x33, 0x69, 0xa9, 0xd9, 0xba, 0xcf, 0xa5, 0x30, 0xe2, 0x63, 0x04, 0x23, 0x14, 0x61,
            0xb2, 0xeb, 0x05, 0xe2, 0xc3, 0x9b, 0xe9, 0xfc, 0xda, 0x6c, 0x19, 0x07, 0x8c, 0x6a, 0x9d, 0x1b
        };

        errNo += checkCipherDoFinal(test_cipher_128_cbc, test_plain_text, test_key_128, test_init_vector, "CBC", false);

        errNo += checkCipherDoFinal(test_cipher_192_cbc, test_plain_text, test_key_192, test_init_vector, "CBC", false);

        errNo += checkCipherDoFinal(test_cipher_256_cbc, test_plain_text, test_key_256, test_init_vector, "CBC", false);

        return errNo;
    }

    private static int test_key128_with_different_blocks_input() {
        int errNo = 0;
        char[] iv = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        char[] key = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};

        char output[] = {
            0x12, 0x29, 0xbd, 0x07, 0xcb, 0xa7, 0x82, 0xa4, 0x6c, 0x4c, 0xb0, 0x37, 0x49, 0x3d, 0xbf, 0x44,
            0x19, 0x80, 0x66, 0xa7, 0xa7, 0x33, 0x8d, 0xd0, 0x28, 0x88, 0x5e, 0x20, 0xfc, 0xa0, 0xfb, 0x60,
            0xd2, 0x2f, 0x85, 0x59, 0x12, 0x42, 0xd7, 0x22, 0xdc, 0x83, 0x45, 0x4f, 0x3a, 0xfa, 0x7d, 0xe0,
            0x56, 0x07, 0x03, 0xd9, 0xe8, 0x21, 0xe6, 0xfe, 0x84, 0x5c, 0x5a, 0x49, 0x2a, 0x61, 0xca, 0x6b,
            0xa4, 0xf7, 0x1f, 0xb0, 0x78, 0x5d, 0x48, 0x8c, 0xb1, 0x71, 0x5a, 0x83, 0xc8, 0xa7, 0x4f, 0x5d,
            0x8e, 0x19, 0xc0, 0x51, 0x14, 0x81, 0xca, 0xad, 0xd5, 0x31, 0xed, 0x1c, 0xb4, 0xc7, 0xf7, 0x0a,
            0xbb, 0xf5, 0x82, 0xba, 0x30, 0xda, 0x1c, 0xd9, 0x73, 0x27, 0x51, 0xd2, 0xee, 0x0a, 0x50, 0x87,
            0xc1, 0x37, 0x38, 0xa3, 0x91, 0x30, 0xe0, 0x92, 0x5a, 0x2a, 0x52, 0xa8, 0x93, 0x20, 0xa4, 0x39,
            0xbb, 0x26, 0x78, 0xb0, 0x38, 0x1a, 0x31, 0x30, 0x2e, 0x24, 0x3a, 0x92, 0xca, 0x99, 0x81, 0xb0,
            0xad, 0xb9, 0xf3, 0x51, 0x6b, 0x7e, 0x23, 0x9f, 0x18, 0x75, 0x5d, 0x55, 0xf2, 0x87, 0x8f, 0xe0,
            0x82, 0xa7, 0xbc, 0x12, 0xb9, 0x12, 0x61, 0xc8, 0x38, 0xe2, 0x26, 0x5f, 0x2a, 0x2d, 0xb0, 0x72,
            0x1e, 0x51, 0xed, 0xec, 0x9f, 0xdd, 0xfa, 0x4e, 0x1c, 0x8c, 0x91, 0xcf, 0x5e, 0x1c, 0xfa, 0x54,
            0x5a, 0xc9, 0x95, 0xcd, 0x0f, 0x93, 0x6f, 0x66, 0x18, 0xde, 0x81, 0x9f, 0xa0, 0x61, 0x65, 0xfa};

        for (int i = 1; i <= 13; i++) {
            char[] input = new char[i * BLOCK_SIZE];
            char[] expectedOutput = new char[i * BLOCK_SIZE];
            for (int k = 0; k < input.length; k++) {
                input[k] = (char) ('a' + k % 26);
                expectedOutput[k] = output[k];
            }
            errNo += checkCipherDoFinal(input, expectedOutput, key, iv, "CBC", false);
        }

        return errNo;
    }

    private static int test_key192_with_different_blocks_input() {
        int errNo = 0;
        char[] iv = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        char[] test_key_192 = {0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
            0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b};
        char output[] = {
            0xe9, 0xc2, 0x17, 0x4c, 0xe0, 0x54, 0xac, 0xa8, 0x5b, 0x60, 0x73, 0x66, 0x45, 0xa7, 0x4b, 0xff,
            0x5b, 0x23, 0x65, 0x00, 0xac, 0xf9, 0xfe, 0x04, 0x08, 0xa8, 0xea, 0xbc, 0xd6, 0x03, 0xa7, 0xaa,
            0x32, 0x8b, 0x0f, 0x1f, 0xd2, 0xef, 0xa7, 0xb7, 0xc4, 0x83, 0xeb, 0xfe, 0xa0, 0x8c, 0x76, 0xab,
            0x4f, 0xa0, 0xb7, 0xd7, 0xe6, 0xe7, 0xdc, 0x96, 0x2c, 0x71, 0xb1, 0x7e, 0xca, 0xb9, 0x86, 0xe3,
            0x0f, 0x97, 0x12, 0x2a, 0x03, 0x23, 0x4d, 0x3f, 0xdf, 0xd5, 0xcf, 0x64, 0x1b, 0x9f, 0xa3, 0x72,
            0x06, 0xc6, 0x3f, 0x41, 0x11, 0x03, 0x25, 0x5f, 0x36, 0xe7, 0x5d, 0x53, 0xb8, 0x3f, 0x00, 0x88,
            0x33, 0x29, 0x6b, 0xaa, 0xf6, 0x98, 0xd1, 0xf5, 0x8d, 0xd4, 0xe5, 0xa0, 0xc6, 0x65, 0x07, 0x0b,
            0x13, 0x0d, 0xb0, 0xf3, 0xaa, 0xaf, 0xf6, 0xd6, 0xaf, 0x06, 0xa2, 0x87, 0xc9, 0xda, 0xe2, 0xf8,
            0x4a, 0x9a, 0x68, 0x7b, 0xf1, 0x49, 0xab, 0x5a, 0x92, 0xe0, 0x5f, 0x13, 0x90, 0xc1, 0x90, 0x78,
            0x69, 0xdc, 0xdd, 0xc8, 0xb6, 0xb1, 0x7b, 0x86, 0x37, 0xf8, 0x15, 0xa2, 0x6e, 0x01, 0xd7, 0x64,
            0x4c, 0x52, 0x4f, 0x78, 0x05, 0x91, 0x8e, 0xe6, 0x6d, 0x68, 0xc0, 0x26, 0x5e, 0x35, 0x48, 0xdc,
            0x31, 0x35, 0xa5, 0xa0, 0xbc, 0x20, 0x75, 0xa8, 0x48, 0xeb, 0xb1, 0x50, 0xb7, 0x80, 0x24, 0x46,
            0xba, 0x8d, 0x52, 0xca, 0xaa, 0x96, 0x41, 0x9d, 0x4f, 0xcd, 0x94, 0x13, 0x0b, 0xf0, 0x81, 0xa5};

        for (int i = 1; i <= 13; i++) {
            char[] input = new char[i * BLOCK_SIZE];
            char[] expectedOutput = new char[i * BLOCK_SIZE];
            for (int k = 0; k < input.length; k++) {
                input[k] = (char) ('a' + k % 26);
                expectedOutput[k] = output[k];
            }
            errNo += checkCipherDoFinal(input, expectedOutput, test_key_192, iv, "CBC", false);
        }

        return errNo;
    }

    private static int test_key256_with_different_blocks_input() {
        int errNo = 0;
        char[] iv = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        char[] test_key_256 = {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
            0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4};

        char output[] = {
            0x83, 0x03, 0x0d, 0xe6, 0x1b, 0x1d, 0xa2, 0xee, 0x1b, 0xe4, 0x02, 0xee, 0x50, 0x1f, 0x19, 0xa4,
            0xa9, 0x23, 0xa4, 0x42, 0xd1, 0x20, 0xd8, 0x67, 0x48, 0xcc, 0xcf, 0x80, 0x32, 0x26, 0x2f, 0x8d,
            0xe3, 0x53, 0xc3, 0x3b, 0xd1, 0x7f, 0x8d, 0xdd, 0x66, 0xd3, 0xb5, 0xdb, 0x6c, 0xbd, 0xaf, 0x25,
            0x17, 0xde, 0x66, 0x49, 0xf1, 0x51, 0x22, 0x1c, 0x48, 0x3d, 0xb8, 0x79, 0x12, 0xb1, 0x48, 0x12,
            0x87, 0x1f, 0xb9, 0x7a, 0x46, 0x1c, 0xcc, 0x4d, 0x96, 0x54, 0x27, 0x4e, 0xd8, 0xda, 0xed, 0xe7,
            0x31, 0x30, 0x16, 0xa7, 0xd1, 0x68, 0xc0, 0x02, 0xa8, 0xd4, 0xe6, 0x9e, 0xc9, 0xdd, 0x1f, 0x94,
            0x7f, 0x53, 0xd9, 0x3b, 0x9c, 0x79, 0x39, 0x70, 0xa5, 0x8c, 0x81, 0xb4, 0x28, 0xda, 0x7d, 0x43,
            0x55, 0x4b, 0x02, 0x4c, 0x82, 0x4a, 0x65, 0x9a, 0x2a, 0x6d, 0xcf, 0x3e, 0xa0, 0xa2, 0x60, 0x23,
            0x81, 0xa0, 0x58, 0x04, 0xe8, 0x16, 0x48, 0x80, 0x9e, 0x27, 0xb7, 0x2d, 0x1b, 0x65, 0x2e, 0xfb,
            0x69, 0xdd, 0x5a, 0xc4, 0x74, 0xd4, 0xc5, 0xb4, 0x5e, 0x0c, 0xdc, 0x68, 0x37, 0x2a, 0xf9, 0x5e,
            0xd3, 0xf1, 0xac, 0x3c, 0xe3, 0x9f, 0x3b, 0x0c, 0xd5, 0x30, 0x9d, 0x22, 0x55, 0x31, 0xad, 0x53,
            0xbf, 0x6c, 0x4b, 0x9b, 0x51, 0xb7, 0x69, 0x97, 0xe7, 0x37, 0x3a, 0x0b, 0x32, 0x19, 0x8b, 0xdd,
            0x55, 0xdf, 0x04, 0xae, 0xd3, 0x81, 0xf5, 0xcc, 0x24, 0xd2, 0x1e, 0x67, 0xcc, 0xc9, 0xcf, 0x04};

        for (int i = 1; i <= 13; i++) {
            char[] input = new char[i * BLOCK_SIZE];
            char[] expectedOutput = new char[i * BLOCK_SIZE];
            for (int k = 0; k < input.length; k++) {
                input[k] = (char) ('a' + k % 26);
                expectedOutput[k] = output[k];
            }
            errNo += checkCipherDoFinal(input, expectedOutput, test_key_256, iv, "CBC", false);
        }

        return errNo;
    }

    private static int test_key192_cipher_update() {
        int errNo = 0;
        char[] iv = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        char[] test_key_192 = {0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
            0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b};
        char output[] = {
            0xe9, 0xc2, 0x17, 0x4c, 0xe0, 0x54, 0xac, 0xa8, 0x5b, 0x60, 0x73, 0x66, 0x45, 0xa7, 0x4b, 0xff,
            0x5b, 0x23, 0x65, 0x00, 0xac, 0xf9, 0xfe, 0x04, 0x08, 0xa8, 0xea, 0xbc, 0xd6, 0x03, 0xa7, 0xaa,
            0x32, 0x8b, 0x0f, 0x1f, 0xd2, 0xef, 0xa7, 0xb7, 0xc4, 0x83, 0xeb, 0xfe, 0xa0, 0x8c, 0x76, 0xab,
            0x4f, 0xa0, 0xb7, 0xd7, 0xe6, 0xe7, 0xdc, 0x96, 0x2c, 0x71, 0xb1, 0x7e, 0xca, 0xb9, 0x86, 0xe3,
            0x0f, 0x97, 0x12, 0x2a, 0x03, 0x23, 0x4d, 0x3f, 0xdf, 0xd5, 0xcf, 0x64, 0x1b, 0x9f, 0xa3, 0x72,
            0x06, 0xc6, 0x3f, 0x41, 0x11, 0x03, 0x25, 0x5f, 0x36, 0xe7, 0x5d, 0x53, 0xb8, 0x3f, 0x00, 0x88,
            0x33, 0x29, 0x6b, 0xaa, 0xf6, 0x98, 0xd1, 0xf5, 0x8d, 0xd4, 0xe5, 0xa0, 0xc6, 0x65, 0x07, 0x0b,
            0x13, 0x0d, 0xb0, 0xf3, 0xaa, 0xaf, 0xf6, 0xd6, 0xaf, 0x06, 0xa2, 0x87, 0xc9, 0xda, 0xe2, 0xf8,
            0x4a, 0x9a, 0x68, 0x7b, 0xf1, 0x49, 0xab, 0x5a, 0x92, 0xe0, 0x5f, 0x13, 0x90, 0xc1, 0x90, 0x78,
            0x69, 0xdc, 0xdd, 0xc8, 0xb6, 0xb1, 0x7b, 0x86, 0x37, 0xf8, 0x15, 0xa2, 0x6e, 0x01, 0xd7, 0x64,
            0x4c, 0x52, 0x4f, 0x78, 0x05, 0x91, 0x8e, 0xe6, 0x6d, 0x68, 0xc0, 0x26, 0x5e, 0x35, 0x48, 0xdc,
            0x31, 0x35, 0xa5, 0xa0, 0xbc, 0x20, 0x75, 0xa8, 0x48, 0xeb, 0xb1, 0x50, 0xb7, 0x80, 0x24, 0x46,
            0xba, 0x8d, 0x52, 0xca, 0xaa, 0x96, 0x41, 0x9d, 0x4f, 0xcd, 0x94, 0x13, 0x0b, 0xf0, 0x81, 0xa5};

        char[] input = new char[13 * BLOCK_SIZE];
        char[] expectedOutput = new char[13 * BLOCK_SIZE];
        //char[] output = new char[13 * BLOCK_SIZE];
        for (int k = 0; k < input.length; k++) {
            input[k] = (char) ('a' + k % 26);
            expectedOutput[k] = output[k];
        }
        //checkCipherDoFinal(input, expectedOutput, test_key_192, iv, "CBC", false);
        for (int i = 0; i < 100; i++) {
            errNo += aes_cbc_cipher_update(input, expectedOutput, test_key_192, iv);
        }

        if (errNo > 0) {
            System.out.println("aes_cbc_cipher_update failed");
        } else {
            System.out.println("aes_cbc_cipher_update sucessed");
        }

        return errNo;
    }

    private static int test_key256_cipher_update() {
        int errNo = 0;
        char[] iv = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        char[] test_key_256 = {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
            0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4};

        char output[] = {
            0x83, 0x03, 0x0d, 0xe6, 0x1b, 0x1d, 0xa2, 0xee, 0x1b, 0xe4, 0x02, 0xee, 0x50, 0x1f, 0x19, 0xa4,
            0xa9, 0x23, 0xa4, 0x42, 0xd1, 0x20, 0xd8, 0x67, 0x48, 0xcc, 0xcf, 0x80, 0x32, 0x26, 0x2f, 0x8d,
            0xe3, 0x53, 0xc3, 0x3b, 0xd1, 0x7f, 0x8d, 0xdd, 0x66, 0xd3, 0xb5, 0xdb, 0x6c, 0xbd, 0xaf, 0x25,
            0x17, 0xde, 0x66, 0x49, 0xf1, 0x51, 0x22, 0x1c, 0x48, 0x3d, 0xb8, 0x79, 0x12, 0xb1, 0x48, 0x12,
            0x87, 0x1f, 0xb9, 0x7a, 0x46, 0x1c, 0xcc, 0x4d, 0x96, 0x54, 0x27, 0x4e, 0xd8, 0xda, 0xed, 0xe7,
            0x31, 0x30, 0x16, 0xa7, 0xd1, 0x68, 0xc0, 0x02, 0xa8, 0xd4, 0xe6, 0x9e, 0xc9, 0xdd, 0x1f, 0x94,
            0x7f, 0x53, 0xd9, 0x3b, 0x9c, 0x79, 0x39, 0x70, 0xa5, 0x8c, 0x81, 0xb4, 0x28, 0xda, 0x7d, 0x43,
            0x55, 0x4b, 0x02, 0x4c, 0x82, 0x4a, 0x65, 0x9a, 0x2a, 0x6d, 0xcf, 0x3e, 0xa0, 0xa2, 0x60, 0x23,
            0x81, 0xa0, 0x58, 0x04, 0xe8, 0x16, 0x48, 0x80, 0x9e, 0x27, 0xb7, 0x2d, 0x1b, 0x65, 0x2e, 0xfb,
            0x69, 0xdd, 0x5a, 0xc4, 0x74, 0xd4, 0xc5, 0xb4, 0x5e, 0x0c, 0xdc, 0x68, 0x37, 0x2a, 0xf9, 0x5e,
            0xd3, 0xf1, 0xac, 0x3c, 0xe3, 0x9f, 0x3b, 0x0c, 0xd5, 0x30, 0x9d, 0x22, 0x55, 0x31, 0xad, 0x53,
            0xbf, 0x6c, 0x4b, 0x9b, 0x51, 0xb7, 0x69, 0x97, 0xe7, 0x37, 0x3a, 0x0b, 0x32, 0x19, 0x8b, 0xdd,
            0x55, 0xdf, 0x04, 0xae, 0xd3, 0x81, 0xf5, 0xcc, 0x24, 0xd2, 0x1e, 0x67, 0xcc, 0xc9, 0xcf, 0x04};

        char[] input = new char[13 * BLOCK_SIZE];
        char[] expectedOutput = new char[13 * BLOCK_SIZE];
        //char[] output = new char[13 * BLOCK_SIZE];
        for (int k = 0; k < input.length; k++) {
            input[k] = (char) ('a' + k % 26);
            expectedOutput[k] = output[k];
        }

        //checkCipherDoFinal(input, expectedOutput, test_key_192, iv, "CBC", false);
        for (int i = 0; i < 100; i++) {
            errNo += aes_cbc_cipher_update(input, expectedOutput, test_key_256, iv);
        }

        if (errNo > 0) {
            System.out.println("aes_cbc_cipher_update failed");
        } else {
            System.out.println("aes_cbc_cipher_update succeeded");
        }

        return errNo;
    }

    private static int aes_cbc_cipher_update(char[] input, char[] expectedOutput, char[] keyStr, char[] iv) {
        int errNo = 0;

        int inputOffset = 0;
        int inputLength = 0;
        int outputOffset = 0;

        Random r = new Random();
        int blockOffset = r.nextInt(input.length / 16); //[ )

        try {
            byte[] keyBytes = convertToBytes(keyStr);
            byte[] ivBytes = convertToBytes(iv);
            byte[] inputBytes = convertToBytes(input);
            byte[] outputBytes = new byte[inputBytes.length];
            byte[] expectedOutputBytes = convertToBytes(expectedOutput);

            SecretKeySpec key = new SecretKeySpec(keyBytes, ALGORITHM);
            IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);
            Cipher cipher = Cipher.getInstance("AES/" + "CBC" + "/NoPadding");

            cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);

            inputOffset = 0;
            inputLength = 16 * blockOffset;
            outputOffset = 0;
            cipher.update(inputBytes, inputOffset, inputLength, outputBytes, outputOffset);

            inputOffset = 16 * blockOffset;
            inputLength = 16 * (input.length / 16 - blockOffset);
            outputOffset = 16 * blockOffset;
            cipher.update(inputBytes, inputOffset, inputLength, outputBytes, outputOffset);

            String hints = "AES-" + "CBC"
                    + "(Keylen = " + keyStr.length * 8
                    + ", input lenght = " + input.length
                    + ") ";
            if (compareArrays(outputBytes, expectedOutputBytes) == 0) {
                //System.out.println(hints + " succeeded.");
            } else {
                System.out.println(hints + " failed.");
                errNo++;
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

        return errNo;
    }

    private static void printTest() {
        char[] iv = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        //char[] keyStr = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
        char[] test_key_192 = {0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
            0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b};
        char[] test_key_256 = {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
            0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4};

        for (int i = 1; i <= 13; i++) {
            char[] input = new char[i * BLOCK_SIZE];
            for (int j = 0; j < input.length; j++) {
                input[j] = (char) ('a' + j % 26);
            }

            try {
                byte[] keyBytes = convertToBytes(test_key_256);
                byte[] ivBytes = convertToBytes(iv);
                byte[] inputBytes = convertToBytes(input);
                //byte[] expectedOutputBytes = convertToBytes(expectedOutput);

                SecretKeySpec key = new SecretKeySpec(keyBytes, ALGORITHM);
                IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);
                Cipher cipher = Cipher.getInstance("AES/" + "CBC" + "/NoPadding");

                cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);
                byte[] outputBytes = cipher.doFinal(inputBytes);

                showArray(outputBytes, "cbc decrypted");

            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

    }

    private static int checkCipherDoFinal(char[] input, char[] expectedOutput, char[] keyStr, char[] iv, String mode, boolean isEncrypt) {
        int errNo = 0;
        try {
            byte[] keyBytes = convertToBytes(keyStr);
            byte[] ivBytes = convertToBytes(iv);
            byte[] inputBytes = convertToBytes(input);
            byte[] expectedOutputBytes = convertToBytes(expectedOutput);

            SecretKeySpec key = new SecretKeySpec(keyBytes, ALGORITHM);
            IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);
            Cipher cipher = Cipher.getInstance("AES/" + mode + "/NoPadding");

            cipher.init(isEncrypt ? Cipher.ENCRYPT_MODE : Cipher.DECRYPT_MODE, key, ivSpec);
            byte[] outputBytes = cipher.doFinal(inputBytes);

            String hints = "AES-" + mode
                    + "(Keylen = " + keyStr.length * 8
                    + ", input lenght = " + input.length
                    + ") ";
            if (compareArrays(outputBytes, expectedOutputBytes) == 0) {
                System.out.println(hints + " succeeded.");
            } else {
                System.out.println(hints + " failed.");
                errNo++;
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return errNo;
    }

    private static void warmUp() {
        char[] test_plain_text = {
            0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
            0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
            0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
            0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
        };

        //[16]
        char[] test_key_128 = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};

        //[16]
        char[] test_init_vector = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};

        //64
        char[] test_cipher_128_cbc = {
            0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
            0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
            0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
            0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7};

        try {
            byte[] keyBytes = convertToBytes(test_key_128);
            byte[] ivBytes = convertToBytes(test_init_vector);
            byte[] inputBytes = convertToBytes(test_cipher_128_cbc);

            SecretKeySpec key = new SecretKeySpec(keyBytes, ALGORITHM);
            IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);
            Cipher cipher = Cipher.getInstance("AES/" + "CBC" + "/NoPadding");

            for (int i = 0; i < 200000; i++) {
                cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);
                byte[] outputBytes = cipher.doFinal(inputBytes);
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    static private void showArray(byte b[], String name) {
        System.out.format("%s [%d]: ", name, b.length);
        for (int i = 0; i < b.length; i++) {
            System.out.format("0x%02x, ", b[i] & 0xff);
        }
        System.out.println();
    }

    static private int compareArrays(byte b[], byte exp[]) {
        if (b.length != exp.length) {
            System.out.format("different lengths for actual and expected output arrays\n");
            showArray(b, "test: ");
            showArray(exp, "exp : ");
            return 1;
        }
        for (int i = 0; i < exp.length; i++) {
            if (b[i] != exp[i]) {
                System.out.format("output error at index %d: got %02x, expected %02x\n", i, b[i] & 0xff, exp[i] & 0xff);
                showArray(b, "test: ");
                showArray(exp, "exp : ");
                return 1;
            }
        }
        return 0; // the same
    }

    static private byte[] convertToBytes(char[] in) {
        byte[] out = new byte[in.length];
        for (int i = 0; i < in.length; i++) {
            out[i] = (byte) in[i];
        }
        return out;
    }

    private static final int BLOCK_SIZE = 16;
    private static final String ALGORITHM = "AES";
    //private static final String PROVIDER = "SunJCE";
}
